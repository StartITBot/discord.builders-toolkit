import random
import typing
import hikari
import logging

import hikari.impl.special_endpoints
import hikari.api.special_endpoints

IMAGE_FILE: typing.Final[str] = "image.png"
TEST_FILE: typing.Final[str] = "test.txt"

_logger = logging.getLogger(__name__)

bot = hikari.GatewayBot("TOKEN", logs="INFO")


def button_component() -> hikari.api.InteractiveButtonBuilder:
    return hikari.impl.InteractiveButtonBuilder(
        style=hikari.ButtonStyle.SUCCESS, custom_id=str(random.randint(0, 99999)).zfill(5), label="Yes"
    )


def action_row_component() -> hikari.api.MessageActionRowBuilder:
    action_row = hikari.impl.MessageActionRowBuilder()

    action_row.add_component(button_component())
    action_row.add_component(button_component())

    return action_row


def section_component() -> hikari.api.SectionComponentBuilder:
    section = hikari.impl.SectionComponentBuilder(accessory=button_component())
    section.add_text_display("Hello world!")
    section.add_text_display("Hello world V2!")

    return section


def text_display_component() -> hikari.api.TextDisplayComponentBuilder:
    return hikari.impl.TextDisplayComponentBuilder(content="A cool text display")


def thumbnail_component() -> hikari.api.ThumbnailComponentBuilder:
    return hikari.impl.ThumbnailComponentBuilder(media=TEST_FILE, description="A thumbnail component!")


def media_gallery_component() -> hikari.api.MediaGalleryComponentBuilder:
    media_gallery = hikari.impl.MediaGalleryComponentBuilder()

    media_gallery.add_media_gallery_item(IMAGE_FILE, description="A media gallery item!")

    media_gallery.add_media_gallery_item(IMAGE_FILE, description="A media gallery item 2!")

    media_gallery.add_media_gallery_item(IMAGE_FILE, description="A media gallery item 3!")

    return media_gallery


def separator_component() -> hikari.api.SeparatorComponentBuilder:
    return hikari.impl.SeparatorComponentBuilder(divider=True)


def file_component() -> hikari.api.FileComponentBuilder:
    return hikari.impl.FileComponentBuilder(file=TEST_FILE)


def container_component() -> hikari.api.ContainerComponentBuilder:
    container = hikari.impl.ContainerComponentBuilder(accent_color=hikari.Color.from_hex_code("FFB123"), spoiler=True)

    container.add_component(text_display_component())
    container.add_component(media_gallery_component())
    container.add_component(text_display_component())
    container.add_component(action_row_component())

    return container


@bot.listen()
async def command_interaction(event: hikari.InteractionCreateEvent) -> None:
    interaction = event.interaction

    if isinstance(interaction, hikari.ComponentInteraction):
        await interaction.create_initial_response(
            hikari.ResponseType.MESSAGE_CREATE,
            f"{interaction.custom_id} ({interaction.component_type}) pressed!",
            flags=hikari.MessageFlag.EPHEMERAL,
        )
        return

    if not isinstance(interaction, hikari.CommandInteraction):
        _logger.info(
            f"Ignoring interaction type: {event.interaction.type.name if isinstance(event.interaction.type, hikari.InteractionType) else event.interaction.type}"
        )
        return

    await interaction.create_initial_response(
        hikari.ResponseType.MESSAGE_CREATE,
        components=[
            section_component(),
            media_gallery_component(),
            separator_component(),
            file_component(),
            container_component(),
        ],
    )

    message = await interaction.fetch_initial_response()


@bot.listen()
async def startup(event: hikari.StartedEvent) -> None:
    test_slash_command = hikari.impl.SlashCommandBuilder(name="test", description="This is a test command.")

    application = await event.app.rest.fetch_application()

    await event.app.rest.set_application_commands(application, [test_slash_command])


if __name__ == "__main__":
    bot.run()
